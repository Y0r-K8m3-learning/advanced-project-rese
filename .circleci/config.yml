# This config was automatically generated from your source code
# Stacks detected: deps:node:src,deps:php:src
version: 2.1
orbs:
  node: circleci/node@5
  php: circleci/php@1
jobs:
  build-node:
    # Build node project
    executor: node/default
    working_directory: ~/project/src
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      # Copy output to artifacts dir
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build
  test-php:
    # Install php packages and run tests
    docker:
      - image: cimg/php:8.2-node
    working_directory: ~/project/src
    steps:
      - checkout:
          path: ~/project
      - php/install-packages
      - run:
          name: run tests
          command: ./vendor/bin/phpunit
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $SSH_KEY_FINGERPRINT
      - run:
          name: Add EC2 to known_hosts
          command: |
            ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
      - run:
          name: Deploy to EC2
          command: |
            ssh $EC2_USER@$EC2_HOST \<< 'EOF'
              # アプリケーションディレクトリに移動
              cd /home/ec2-user/rese/advanced-project-rese
              
              # Gitから最新のコードを取得
              git fetch origin
              git reset --hard origin/main
              
              # Dockerコンテナを停止
              docker-compose down
              
              # 最新のイメージをビルド
              docker-compose build --no-cache
              
              # Composerの依存関係を更新
              docker-compose run --rm app composer install --no-dev --optimize-autoloader
              
              # Laravel設定の最適化
              docker-compose run --rm app php artisan config:clear
              docker-compose run --rm app php artisan cache:clear
              docker-compose run --rm app php artisan route:clear
              docker-compose run --rm app php artisan view:clear
              
              # 設定とキャッシュを最適化
              docker-compose run --rm app php artisan config:cache
              docker-compose run --rm app php artisan route:cache
              docker-compose run --rm app php artisan view:cache
              
              # データベースマイグレーション実行
              docker-compose run --rm app php artisan migrate --force
              
              # ストレージリンクを作成（必要に応じて）
              docker-compose run --rm app php artisan storage:link
              
              # Dockerコンテナを起動
              docker-compose up -d
              
              # 不要なDockerリソースをクリーンアップ
              docker system prune -f
            EOF
workflows:
  # 別ブランチ（main以外）でのunittest実行
  test-on-branches:
    jobs:
      - test-php:
          filters:
            branches:
              ignore: main
  
  # mainブランチマージ後にテスト→デプロイ実行
  deploy-on-main:
    jobs:
      - test-php:
          filters:
            branches:
              only: main
      - build-node:
          requires:
            - test-php
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build-node
          filters:
            branches:
              only: main
